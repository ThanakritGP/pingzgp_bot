import {
  ActionRowBuilder,
  ButtonBuilder,
  ButtonStyle,
  EmbedBuilder
} from 'discord.js';
import fetch from 'node-fetch';
import dotenv from 'dotenv';
dotenv.config();

const CALENDAR_ID = process.env.CALENDAR_ID;
const GOOGLE_API_KEY = process.env.GOOGLE_API_KEY;

const MAX_EVENTS_PER_PAGE = 5; // ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≠‡∏´‡∏ô‡πâ‡∏≤

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÑ‡∏ó‡∏¢
function formatThaiDate(dateStr, isAllDay) {
  const monthNamesThai = ['‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå', '‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°', '‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô', '‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°', '‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô',
    '‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°', '‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°', '‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô', '‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°', '‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô', '‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°'
  ];

  const date = new Date(dateStr);
  if (isAllDay) {
    return `${date.getDate()} ${monthNamesThai[date.getMonth()]} ${date.getFullYear() + 543} (‡∏ó‡∏±‡πâ‡∏á‡∏ß‡∏±‡∏ô)`;
  } else {
    const hours = date.getHours().toString().padStart(2, '0');
    const minutes = date.getMinutes().toString().padStart(2, '0');
    return `${date.getDate()} ${monthNamesThai[date.getMonth()]} ${date.getFullYear() + 543}, ${hours}:${minutes}`;
  }
}

async function fetchEvents() {
  const now = new Date().toISOString();
  const url = `https://www.googleapis.com/calendar/v3/calendars/${encodeURIComponent(CALENDAR_ID)}/events?key=${GOOGLE_API_KEY}&timeMin=${now}&orderBy=startTime&singleEvents=true&maxResults=50`;

  const response = await fetch(url);
  if (!response.ok) throw new Error('Failed to fetch events from Google Calendar');
  const data = await response.json();

  return data.items || [];
}

function createEventEmbed(events, page) {
  const start = page * MAX_EVENTS_PER_PAGE;
  const selectedEvents = events.slice(start, start + MAX_EVENTS_PER_PAGE);

  const embed = new EmbedBuilder()
    .setTitle('üìÖ ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Calendar')
    .setColor('#0099ff')
    .setFooter({
      text: `‡∏´‡∏ô‡πâ‡∏≤ ${page + 1} ‡∏à‡∏≤‡∏Å ${Math.ceil(events.length / MAX_EVENTS_PER_PAGE)}`
    });

  if (selectedEvents.length === 0) {
    embed.setDescription('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');
  } else {
    selectedEvents.forEach((event, index) => {
      const startDate = event.start.dateTime || event.start.date;
      const isAllDay = !!event.start.date;
      const formattedDate = formatThaiDate(startDate, isAllDay);
      embed.addFields({
        name: event.summary || '(‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°)',
        value: `üóìÔ∏è ${formattedDate}${event.location ? `\nüìå ${event.location}` : ''}`,
        inline: false
      });
    });
  }

  return embed;
}

function createButtons(page, maxPage) {
  return new ActionRowBuilder().addComponents(
    new ButtonBuilder()
    .setCustomId('prev_events')
    .setLabel('‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤')
    .setStyle(ButtonStyle.Primary)
    .setEmoji('‚¨ÖÔ∏è')
    .setDisabled(page <= 0),

    new ButtonBuilder()
    .setCustomId('next_events')
    .setLabel('‡∏ñ‡∏±‡∏î‡πÑ‡∏õ')
    .setStyle(ButtonStyle.Primary)
    .setEmoji('‚û°Ô∏è')
    .setDisabled(page >= maxPage - 1),

    new ButtonBuilder()
    .setCustomId('close_events')
    .setLabel('‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á')
    .setStyle(ButtonStyle.Danger)
    .setEmoji('‚ùå')
  );
}

export async function execute(interaction, client) {
  try {
    await interaction.deferReply();

    // ‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ï‡∏≠‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
    try {
      await client.user.setActivity('‡∏î‡∏π‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏à‡∏≤‡∏Å Google Calendar', {
        type: 0
      }); // PLAYING
    } catch (err) {
      console.error('Error setting activity (start):', err);
    }

    const events = await fetchEvents();
    if (!events.length) {
      await interaction.editReply('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô');

      // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏´‡∏ï‡∏∏‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏Å‡πá‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏•‡∏¢
      try {
        await client.user.setActivity('‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏á‡πÅ‡∏ß‡∏£‡∏Ñ‡πå‡∏ã‡πà‡∏≤‡πÜ', {
          type: 3
        }); // WATCHING
      } catch (err) {
        console.error('Error setting activity (no events):', err);
      }

      return;
    }

    let page = 0;
    const maxPage = Math.ceil(events.length / MAX_EVENTS_PER_PAGE);

    const embed = createEventEmbed(events, page);
    const buttons = createButtons(page, maxPage);

    const message = await interaction.editReply({
      embeds: [embed],
      components: [buttons]
    });

    const collector = message.createMessageComponentCollector({
      time: 5 * 60 * 1000 // 5 ‡∏ô‡∏≤‡∏ó‡∏µ
    });

    collector.on('collect', async i => {
      if (i.user.id !== interaction.user.id) {
        await i.reply({
          content: '‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ',
          ephemeral: true
        });
        return;
      }

      if (i.customId === 'prev_events') {
        page = Math.max(page - 1, 0);
      } else if (i.customId === 'next_events') {
        page = Math.min(page + 1, maxPage - 1);
      } else if (i.customId === 'close_events') {
        const closeEmbed = new EmbedBuilder()
        .setTitle('‡∏õ‡∏¥‡∏î‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡πÅ‡∏•‡πâ‡∏ß')
        .setColor('#FF4444')
        .setTimestamp();

        await i.update({
          content: '',
          embeds: [closeEmbed],
          components: []
        });
        collector.stop(); // ‡∏à‡∏∞‡πÑ‡∏õ trigger collector.on('end')
        return;
      }

      const newEmbed = createEventEmbed(events, page);
      const newButtons = createButtons(page, maxPage);
      await i.update({
        embeds: [newEmbed],
        components: [newButtons]
      });
    });

    collector.on('end', async () => {
      // ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏ï‡∏±‡πâ‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏•‡∏±‡∏ö
      await message.edit({
        components: []
      }).catch(() => {});
      try {
        await client.user.setActivity('‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏á‡πÅ‡∏ß‡∏£‡∏Ñ‡πå‡∏ã‡πà‡∏≤‡πÜ', {
          type: 3
        }); // WATCHING
      } catch (err) {
        console.error('Error setting activity (end):', err);
      }
    });

  } catch (error) {
    console.error(error);
    await interaction.editReply('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°');

    try {
      await client.user.setActivity('‡∏£‡∏≠‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏à‡∏≤‡∏Å‡∏õ‡∏¥‡∏á‡πÅ‡∏ß‡∏£‡∏Ñ‡πå‡∏ã‡πà‡∏≤‡πÜ', {
        type: 3
      });
    } catch (err) {
      console.error('Error setting activity (error):', err);
    }
  }
}
